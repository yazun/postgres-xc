--
-- XC_FQS_JOIN
--
-- This file contains testcases for JOINs, it does not test the expressions
-- create the tables first
select create_table_nodes('tab1_rep (val int, val2 int)', '{1, 2, 3}'::int[], 'replication', NULL);
 create_table_nodes 
--------------------
 
(1 row)

insert into tab1_rep (select * from generate_series(1, 5) a, generate_series(1, 5) b);
select create_table_nodes('tab2_rep', '{2, 3, 4}'::int[], 'replication', 'as select * from tab1_rep');
 create_table_nodes 
--------------------
 
(1 row)

select create_table_nodes('tab3_rep', '{1, 3}'::int[], 'replication', 'as select * from tab1_rep');
 create_table_nodes 
--------------------
 
(1 row)

select create_table_nodes('tab4_rep', '{2, 4}'::int[], 'replication', 'as select * from tab1_rep');
 create_table_nodes 
--------------------
 
(1 row)

select create_table_nodes('tab1_mod', '{1, 2, 3}'::int[], 'modulo(val)', 'as select * from tab1_rep');
 create_table_nodes 
--------------------
 
(1 row)

select create_table_nodes('tab2_mod', '{2, 4}'::int[], 'modulo(val)', 'as select * from tab1_rep');
 create_table_nodes 
--------------------
 
(1 row)

select create_table_nodes('tab3_mod', '{1, 2, 3}'::int[], 'modulo(val)', 'as select * from tab1_rep');
 create_table_nodes 
--------------------
 
(1 row)

-- Join involving replicated tables only, all of them should be shippable
select * from tab1_rep, tab2_rep where tab1_rep.val = tab2_rep.val and
										tab1_rep.val2 = tab2_rep.val2 and
										tab1_rep.val > 1 and tab1_rep.val < 4;
 val | val2 | val | val2 
-----+------+-----+------
   2 |    1 |   2 |    1
   2 |    2 |   2 |    2
   2 |    3 |   2 |    3
   2 |    4 |   2 |    4
   2 |    5 |   2 |    5
   3 |    1 |   3 |    1
   3 |    2 |   3 |    2
   3 |    3 |   3 |    3
   3 |    4 |   3 |    4
   3 |    5 |   3 |    5
(10 rows)

explain (costs off, num_nodes on, nodes off, verbose on) select * from tab1_rep, tab2_rep where tab1_rep.val = tab2_rep.val and
										tab1_rep.val2 = tab2_rep.val2 and
										tab1_rep.val > 3 and tab1_rep.val < 5;
                                                                                                             QUERY PLAN                                                                                                              
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan (primary node count=0, node count=1) on "__REMOTE_FQS_QUERY__"
   Output: tab1_rep.val, tab1_rep.val2, tab2_rep.val, tab2_rep.val2
   Remote query: SELECT tab1_rep.val, tab1_rep.val2, tab2_rep.val, tab2_rep.val2 FROM tab1_rep, tab2_rep WHERE ((((tab1_rep.val = tab2_rep.val) AND (tab1_rep.val2 = tab2_rep.val2)) AND (tab1_rep.val > 3)) AND (tab1_rep.val < 5))
(3 rows)

select * from tab1_rep natural join tab2_rep 
			where tab2_rep.val > 2 and tab2_rep.val < 5;
 val | val2 
-----+------
   3 |    1
   3 |    2
   3 |    3
   3 |    4
   3 |    5
   4 |    1
   4 |    2
   4 |    3
   4 |    4
   4 |    5
(10 rows)

explain (costs off, num_nodes on, nodes off, verbose on) select * from tab1_rep natural join tab2_rep
			where tab2_rep.val > 2 and tab2_rep.val < 5;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan (primary node count=0, node count=1) on "__REMOTE_FQS_QUERY__"
   Output: tab1_rep.val, tab1_rep.val2
   Remote query: SELECT tab1_rep.val, tab1_rep.val2 FROM (tab1_rep NATURAL JOIN tab2_rep) WHERE ((tab2_rep.val > 2) AND (tab2_rep.val < 5))
(3 rows)

select * from tab1_rep join tab2_rep using (val, val2) join tab3_rep using (val, val2)
									where tab1_rep.val > 0 and tab2_rep.val < 3; 
 val | val2 
-----+------
   1 |    1
   1 |    2
   1 |    3
   1 |    4
   1 |    5
   2 |    1
   2 |    2
   2 |    3
   2 |    4
   2 |    5
(10 rows)

explain (costs off, num_nodes on, nodes off, verbose on) select * from tab1_rep join tab2_rep using (val, val2) join tab3_rep using (val, val2)
							where tab1_rep.val > 0 and tab2_rep.val < 3; 
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan (primary node count=0, node count=1) on "__REMOTE_FQS_QUERY__"
   Output: tab1_rep.val, tab1_rep.val2
   Remote query: SELECT tab1_rep.val, tab1_rep.val2 FROM ((tab1_rep JOIN tab2_rep USING (val, val2)) JOIN tab3_rep USING (val, val2)) WHERE ((tab1_rep.val > 0) AND (tab2_rep.val < 3))
(3 rows)

select * from tab1_rep natural join tab2_rep natural join tab3_rep
			where tab1_rep.val > 0 and tab2_rep.val < 3;
 val | val2 
-----+------
   1 |    1
   1 |    2
   1 |    3
   1 |    4
   1 |    5
   2 |    1
   2 |    2
   2 |    3
   2 |    4
   2 |    5
(10 rows)

explain (costs off, num_nodes on, nodes off, verbose on) select * from tab1_rep natural join tab2_rep natural join tab3_rep
			where tab1_rep.val > 0 and tab2_rep.val < 3;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan (primary node count=0, node count=1) on "__REMOTE_FQS_QUERY__"
   Output: tab1_rep.val, tab1_rep.val2
   Remote query: SELECT tab1_rep.val, tab1_rep.val2 FROM ((tab1_rep NATURAL JOIN tab2_rep) NATURAL JOIN tab3_rep) WHERE ((tab1_rep.val > 0) AND (tab2_rep.val < 3))
(3 rows)

-- make sure in Joins which are shippable and involve only one node, aggregates
-- are shipped to
select avg(tab1_rep.val) from tab1_rep natural join tab2_rep natural join tab3_rep
			where tab1_rep.val > 0 and tab2_rep.val < 3;
        avg         
--------------------
 1.5000000000000000
(1 row)

explain (costs off, num_nodes on, nodes off, verbose on) select avg(tab1_rep.val) from tab1_rep natural join tab2_rep natural join tab3_rep
			where tab1_rep.val > 0 and tab2_rep.val < 3;
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan (primary node count=0, node count=1) on "__REMOTE_FQS_QUERY__"
   Output: (avg(tab1_rep.val))
   Remote query: SELECT pg_catalog.int8_avg(avg(tab1_rep.val)) AS avg FROM ((tab1_rep NATURAL JOIN tab2_rep) NATURAL JOIN tab3_rep) WHERE ((tab1_rep.val > 0) AND (tab2_rep.val < 3))
(3 rows)

-- the two replicated tables being joined do not have any node in common, the
-- query is not shippable
select * from tab3_rep natural join tab4_rep
			where tab3_rep.val > 2 and tab4_rep.val < 5;
 val | val2 
-----+------
   3 |    1
   3 |    2
   3 |    3
   3 |    4
   3 |    5
   4 |    1
   4 |    2
   4 |    3
   4 |    4
   4 |    5
(10 rows)

explain (costs off, num_nodes on, nodes off, verbose on) select * from tab3_rep natural join tab4_rep
			where tab3_rep.val > 2 and tab4_rep.val < 5;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Hash Join
   Output: tab3_rep.val, tab3_rep.val2
   Hash Cond: ((tab3_rep.val = tab4_rep.val) AND (tab3_rep.val2 = tab4_rep.val2))
   ->  Data Node Scan (primary node count=0, node count=1) on tab3_rep "_REMOTE_TABLE_QUERY_"
         Output: tab3_rep.val, tab3_rep.val2
         Remote query: SELECT val, val2 FROM ONLY tab3_rep WHERE (val > 2)
   ->  Hash
         Output: tab4_rep.val, tab4_rep.val2
         ->  Data Node Scan (primary node count=0, node count=1) on tab4_rep "_REMOTE_TABLE_QUERY_"
               Output: tab4_rep.val, tab4_rep.val2
               Remote query: SELECT val, val2 FROM ONLY tab4_rep WHERE (val < 5)
(11 rows)

-- Join involving one distributed and one replicated table, with replicated
-- table existing on all nodes where distributed table exists. should be
-- shippable
select * from tab1_mod natural join tab1_rep
			where tab1_mod.val > 2 and tab1_rep.val < 4;
 val | val2 
-----+------
   3 |    1
   3 |    2
   3 |    3
   3 |    4
   3 |    5
(5 rows)

explain (costs off, verbose on, nodes off) select * from tab1_mod natural join tab1_rep
			where tab1_mod.val > 2 and tab1_rep.val < 4;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_FQS_QUERY__"
   Output: tab1_mod.val, tab1_mod.val2
   Remote query: SELECT tab1_mod.val, tab1_mod.val2 FROM (tab1_mod NATURAL JOIN tab1_rep) WHERE ((tab1_mod.val > 2) AND (tab1_rep.val < 4))
(3 rows)

-- Join involving one distributed and one replicated table, with replicated
-- table existing on only some of the nodes where distributed table exists.
-- should not be shippable
select * from tab1_mod natural join tab4_rep
			where tab1_mod.val > 2 and tab4_rep.val < 4;
 val | val2 
-----+------
   3 |    1
   3 |    2
   3 |    3
   3 |    4
   3 |    5
(5 rows)

explain (costs off, verbose on, nodes off) select * from tab1_mod natural join tab4_rep
			where tab1_mod.val > 2 and tab4_rep.val < 4;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Hash Join
   Output: tab1_mod.val, tab1_mod.val2
   Hash Cond: ((tab1_mod.val = tab4_rep.val) AND (tab1_mod.val2 = tab4_rep.val2))
   ->  Data Node Scan on tab1_mod "_REMOTE_TABLE_QUERY_"
         Output: tab1_mod.val, tab1_mod.val2
         Remote query: SELECT val, val2 FROM ONLY tab1_mod WHERE (val > 2)
   ->  Hash
         Output: tab4_rep.val, tab4_rep.val2
         ->  Data Node Scan on tab4_rep "_REMOTE_TABLE_QUERY_"
               Output: tab4_rep.val, tab4_rep.val2
               Remote query: SELECT val, val2 FROM ONLY tab4_rep WHERE (val < 4)
(11 rows)

-- Join involving two distributed tables, never shipped
select * from tab1_mod natural join tab2_mod
			where tab1_mod.val > 2 and tab2_mod.val < 4;
 val | val2 
-----+------
   3 |    1
   3 |    2
   3 |    3
   3 |    4
   3 |    5
(5 rows)

explain (costs off, verbose on, nodes off) select * from tab1_mod natural join tab2_mod
			where tab1_mod.val > 2 and tab2_mod.val < 4;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Hash Join
   Output: tab1_mod.val, tab1_mod.val2
   Hash Cond: ((tab1_mod.val = tab2_mod.val) AND (tab1_mod.val2 = tab2_mod.val2))
   ->  Data Node Scan on tab1_mod "_REMOTE_TABLE_QUERY_"
         Output: tab1_mod.val, tab1_mod.val2
         Remote query: SELECT val, val2 FROM ONLY tab1_mod WHERE (val > 2)
   ->  Hash
         Output: tab2_mod.val, tab2_mod.val2
         ->  Data Node Scan on tab2_mod "_REMOTE_TABLE_QUERY_"
               Output: tab2_mod.val, tab2_mod.val2
               Remote query: SELECT val, val2 FROM ONLY tab2_mod WHERE (val < 4)
(11 rows)

-- Join involving a distributed table and two replicated tables, such that the
-- distributed table exists only on nodes common to replicated tables, try few
-- permutations
select * from tab2_rep natural join tab4_rep natural join tab2_mod
			where tab2_rep.val > 2 and tab4_rep.val < 4;
 val | val2 
-----+------
   3 |    1
   3 |    2
   3 |    3
   3 |    4
   3 |    5
(5 rows)

explain (costs off, verbose on, nodes off) select * from tab2_rep natural join tab4_rep natural join tab2_mod
			where tab2_rep.val > 2 and tab4_rep.val < 4;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_FQS_QUERY__"
   Output: tab2_rep.val, tab2_rep.val2
   Remote query: SELECT tab2_rep.val, tab2_rep.val2 FROM ((tab2_rep NATURAL JOIN tab4_rep) NATURAL JOIN tab2_mod) WHERE ((tab2_rep.val > 2) AND (tab4_rep.val < 4))
(3 rows)

select * from tab4_rep natural join tab2_rep natural join tab2_mod
			where tab2_rep.val > 2 and tab4_rep.val < 4;
 val | val2 
-----+------
   3 |    1
   3 |    2
   3 |    3
   3 |    4
   3 |    5
(5 rows)

explain (costs off, verbose on, nodes off) select * from tab4_rep natural join tab2_rep natural join tab2_mod
			where tab2_rep.val > 2 and tab4_rep.val < 4;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_FQS_QUERY__"
   Output: tab4_rep.val, tab4_rep.val2
   Remote query: SELECT tab4_rep.val, tab4_rep.val2 FROM ((tab4_rep NATURAL JOIN tab2_rep) NATURAL JOIN tab2_mod) WHERE ((tab2_rep.val > 2) AND (tab4_rep.val < 4))
(3 rows)

select * from tab2_rep natural join tab2_mod natural join tab4_rep
			where tab2_rep.val > 2 and tab4_rep.val < 4;
 val | val2 
-----+------
   3 |    1
   3 |    2
   3 |    3
   3 |    4
   3 |    5
(5 rows)

explain (costs off, verbose on, nodes off) select * from tab2_rep natural join tab2_mod natural join tab4_rep
			where tab2_rep.val > 2 and tab4_rep.val < 4;
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_FQS_QUERY__"
   Output: tab2_rep.val, tab2_rep.val2
   Remote query: SELECT tab2_rep.val, tab2_rep.val2 FROM ((tab2_rep NATURAL JOIN tab2_mod) NATURAL JOIN tab4_rep) WHERE ((tab2_rep.val > 2) AND (tab4_rep.val < 4))
(3 rows)

-- qualifications on distributed tables
-- In case of 2,3,4 datanodes following join should get shipped completely
select * from tab1_mod natural join tab4_rep where tab1_mod.val = 1 order by tab1_mod.val2;
 val | val2 
-----+------
   1 |    1
   1 |    2
   1 |    3
   1 |    4
   1 |    5
(5 rows)

explain (costs off, verbose on, nodes off, num_nodes on) select * from tab1_mod natural join tab4_rep where tab1_mod.val = 1 order by tab1_mod.val2;
                                                                                                                                      QUERY PLAN                                                                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan (primary node count=0, node count=1) on "__REMOTE_SORT_QUERY__"
   Output: tab1_mod.val, tab1_mod.val2, tab1_mod.val2
   Remote query: SELECT l.a_1, l.a_2 FROM ((SELECT tab1_mod.val, tab1_mod.val2 FROM ONLY tab1_mod WHERE (tab1_mod.val = 1)) l(a_1, a_2) JOIN (SELECT tab4_rep.val, tab4_rep.val2 FROM ONLY tab4_rep WHERE (tab4_rep.val = 1)) r(a_1, a_2) ON (true)) WHERE (l.a_2 = r.a_2) ORDER BY 2
(3 rows)

-- following join between distributed tables should get FQSed because both of
-- them reduce to a single node
select * from tab1_mod join tab2_mod using (val2)
		where tab1_mod.val = 1 and tab2_mod.val = 2 order by tab1_mod.val2;
 val2 | val | val 
------+-----+-----
    1 |   1 |   2
    2 |   1 |   2
    3 |   1 |   2
    4 |   1 |   2
    5 |   1 |   2
(5 rows)

explain (costs off, verbose on, nodes off, num_nodes on) select * from tab1_mod join tab2_mod using (val2)
		where tab1_mod.val = 1 and tab2_mod.val = 2 order by tab1_mod.val;
                                                                                                                                    QUERY PLAN                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan (primary node count=0, node count=1) on "_REMOTE_TABLE_QUERY_"
   Output: tab1_mod.val2, tab1_mod.val, tab2_mod.val, tab1_mod.val
   Remote query: SELECT l.a_1, l.a_2, r.a_1 FROM ((SELECT tab1_mod.val2, tab1_mod.val FROM ONLY tab1_mod WHERE (tab1_mod.val = 1)) l(a_1, a_2) JOIN (SELECT tab2_mod.val, tab2_mod.val2 FROM ONLY tab2_mod WHERE (tab2_mod.val = 2)) r(a_1, a_2) ON (true)) WHERE (l.a_1 = r.a_2)
(3 rows)

-- JOIN involving the distributed table with equi-JOIN on the distributed column
-- with same kind of distribution on same nodes.
select * from tab1_mod, tab3_mod where tab1_mod.val = tab3_mod.val and tab1_mod.val = 1;
 val | val2 | val | val2 
-----+------+-----+------
   1 |    1 |   1 |    1
   1 |    1 |   1 |    2
   1 |    1 |   1 |    3
   1 |    1 |   1 |    4
   1 |    1 |   1 |    5
   1 |    2 |   1 |    1
   1 |    2 |   1 |    2
   1 |    2 |   1 |    3
   1 |    2 |   1 |    4
   1 |    2 |   1 |    5
   1 |    3 |   1 |    1
   1 |    3 |   1 |    2
   1 |    3 |   1 |    3
   1 |    3 |   1 |    4
   1 |    3 |   1 |    5
   1 |    4 |   1 |    1
   1 |    4 |   1 |    2
   1 |    4 |   1 |    3
   1 |    4 |   1 |    4
   1 |    4 |   1 |    5
   1 |    5 |   1 |    1
   1 |    5 |   1 |    2
   1 |    5 |   1 |    3
   1 |    5 |   1 |    4
   1 |    5 |   1 |    5
(25 rows)

explain (costs off, verbose on, nodes off) select * from tab1_mod, tab3_mod
			where tab1_mod.val = tab3_mod.val and tab1_mod.val = 1;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Data Node Scan on "__REMOTE_FQS_QUERY__"
   Output: tab1_mod.val, tab1_mod.val2, tab3_mod.val, tab3_mod.val2
   Remote query: SELECT tab1_mod.val, tab1_mod.val2, tab3_mod.val, tab3_mod.val2 FROM tab1_mod, tab3_mod WHERE ((tab1_mod.val = tab3_mod.val) AND (tab1_mod.val = 1))
(3 rows)

-- DMLs involving JOINs are not FQSed
-- We need to just make sure that FQS is not kicking in. But the JOINs can still
-- be reduced by JOIN reduction optimization. Turn this optimization off so as
-- to generate plans independent of number of nodes in the cluster.
set enable_remotejoin to false;
explain (costs off, verbose on, nodes off) update tab1_mod set val2 = 1000 from tab2_mod 
		where tab1_mod.val = tab2_mod.val and tab1_mod. val2 = tab2_mod.val2;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Update on public.tab1_mod
   Node expr: tab1_mod.val
   Remote query: UPDATE ONLY public.tab1_mod SET val2 = $2 WHERE ctid = $5 AND xc_node_id = $6 
   ->  Hash Join
         Output: tab1_mod.val, 1000, tab1_mod.val, tab1_mod.val2, tab1_mod.ctid, tab1_mod.xc_node_id, tab2_mod.ctid
         Hash Cond: ((tab1_mod.val = tab2_mod.val) AND (tab1_mod.val2 = tab2_mod.val2))
         ->  Data Node Scan on tab1_mod "_REMOTE_TABLE_QUERY_"
               Output: tab1_mod.val, tab1_mod.val2, tab1_mod.ctid, tab1_mod.xc_node_id
               Remote query: SELECT val, val2, ctid, xc_node_id FROM ONLY tab1_mod WHERE true
         ->  Hash
               Output: tab2_mod.ctid, tab2_mod.val, tab2_mod.val2
               ->  Data Node Scan on tab2_mod "_REMOTE_TABLE_QUERY_"
                     Output: tab2_mod.ctid, tab2_mod.val, tab2_mod.val2
                     Remote query: SELECT ctid, val, val2 FROM ONLY tab2_mod WHERE true
(14 rows)

explain (costs off, verbose on, nodes off) delete from tab1_mod using tab2_mod
		where tab1_mod.val = tab2_mod.val and tab1_mod.val2 = tab2_mod.val2;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Delete on public.tab1_mod
   Remote query: DELETE FROM ONLY public.tab1_mod WHERE ctid = $3 AND xc_node_id = $4 
   ->  Hash Join
         Output: tab1_mod.val, tab1_mod.val2, tab1_mod.ctid, tab1_mod.xc_node_id, tab2_mod.ctid
         Hash Cond: ((tab1_mod.val = tab2_mod.val) AND (tab1_mod.val2 = tab2_mod.val2))
         ->  Data Node Scan on tab1_mod "_REMOTE_TABLE_QUERY_"
               Output: tab1_mod.val, tab1_mod.val2, tab1_mod.ctid, tab1_mod.xc_node_id
               Remote query: SELECT val, val2, ctid, xc_node_id FROM ONLY tab1_mod WHERE true
         ->  Hash
               Output: tab2_mod.ctid, tab2_mod.val, tab2_mod.val2
               ->  Data Node Scan on tab2_mod "_REMOTE_TABLE_QUERY_"
                     Output: tab2_mod.ctid, tab2_mod.val, tab2_mod.val2
                     Remote query: SELECT ctid, val, val2 FROM ONLY tab2_mod WHERE true
(13 rows)

explain (costs off, verbose on, nodes off) update tab1_rep set val2 = 1000 from tab2_rep
		where tab1_rep.val = tab2_rep.val and tab1_rep.val2 = tab2_rep.val2;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Update on public.tab1_rep
   Remote query: UPDATE ONLY public.tab1_rep SET val2 = $2 WHERE ctid = $5 
   ->  Hash Join
         Output: tab1_rep.val, 1000, tab1_rep.val, tab1_rep.val2, tab1_rep.ctid, tab2_rep.ctid
         Hash Cond: ((tab1_rep.val = tab2_rep.val) AND (tab1_rep.val2 = tab2_rep.val2))
         ->  Data Node Scan on tab1_rep "_REMOTE_TABLE_QUERY_"
               Output: tab1_rep.val, tab1_rep.val2, tab1_rep.ctid
               Remote query: SELECT val, val2, ctid FROM ONLY tab1_rep WHERE true
         ->  Hash
               Output: tab2_rep.ctid, tab2_rep.val, tab2_rep.val2
               ->  Data Node Scan on tab2_rep "_REMOTE_TABLE_QUERY_"
                     Output: tab2_rep.ctid, tab2_rep.val, tab2_rep.val2
                     Remote query: SELECT ctid, val, val2 FROM ONLY tab2_rep WHERE true
(13 rows)

explain (costs off, verbose on, nodes off) delete from tab1_rep using tab2_rep 
		where tab1_rep.val = tab2_rep.val and tab1_rep.val2 = tab2_rep.val2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Delete on public.tab1_rep
   Remote query: DELETE FROM ONLY public.tab1_rep WHERE ctid = $3 
   ->  Hash Join
         Output: tab1_rep.val, tab1_rep.val2, tab1_rep.ctid, tab2_rep.ctid
         Hash Cond: ((tab1_rep.val = tab2_rep.val) AND (tab1_rep.val2 = tab2_rep.val2))
         ->  Data Node Scan on tab1_rep "_REMOTE_TABLE_QUERY_"
               Output: tab1_rep.val, tab1_rep.val2, tab1_rep.ctid
               Remote query: SELECT val, val2, ctid FROM ONLY tab1_rep WHERE true
         ->  Hash
               Output: tab2_rep.ctid, tab2_rep.val, tab2_rep.val2
               ->  Data Node Scan on tab2_rep "_REMOTE_TABLE_QUERY_"
                     Output: tab2_rep.ctid, tab2_rep.val, tab2_rep.val2
                     Remote query: SELECT ctid, val, val2 FROM ONLY tab2_rep WHERE true
(13 rows)

reset enable_remotejoin;
drop table tab1_rep;
drop table tab2_rep;
drop table tab3_rep;
drop table tab4_rep;
drop table tab1_mod;
drop table tab2_mod;
